// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpiunits/generate_units.py. DO NOT MODIFY

package edu.wpi.first.units.measure;

import static edu.wpi.first.units.Units.*;
import edu.wpi.first.units.*;

@SuppressWarnings({"unchecked", "cast", "checkstyle", "PMD"})
public interface Torque extends Measure<TorqueUnit> {
  static  Torque ofRelativeUnits(double magnitude, TorqueUnit unit) {
    return new ImmutableTorque(magnitude, unit.toBaseUnits(magnitude), unit);
  }

  static  Torque ofBaseUnits(double baseUnitMagnitude, TorqueUnit unit) {
    return new ImmutableTorque(unit.fromBaseUnits(baseUnitMagnitude), baseUnitMagnitude, unit);
  }

  @Override
  Torque copy();

  @Override
  default MutTorque mutableCopy() {
    return new MutTorque(magnitude(), baseUnitMagnitude(), unit());
  }

  @Override
  TorqueUnit unit();

  @Override
  default TorqueUnit baseUnit() { return (TorqueUnit) unit().getBaseUnit(); }

  @Override
  default double in(TorqueUnit unit) {
    return unit.fromBaseUnits(baseUnitMagnitude());
  }

  @Override
  default Torque unaryMinus() {
    return (Torque) unit().ofBaseUnits(0 - baseUnitMagnitude());
  }

  @Override
  @Deprecated(since = "2025", forRemoval = true)
  @SuppressWarnings({"deprecation", "removal"})
  default Torque negate() {
    return (Torque) unaryMinus();
  }

  @Override
  default Torque plus(Measure<? extends TorqueUnit> other) {
    return (Torque) unit().ofBaseUnits(baseUnitMagnitude() + other.baseUnitMagnitude());
  }

  @Override
  default Torque minus(Measure<? extends TorqueUnit> other) {
    return (Torque) unit().ofBaseUnits(baseUnitMagnitude() - other.baseUnitMagnitude());
  }

  @Override
  default Torque times(double multiplier) {
    return (Torque) unit().ofBaseUnits(baseUnitMagnitude() * multiplier);
  }

  @Override
  default Torque div(double divisor) {
    return (Torque) unit().ofBaseUnits(baseUnitMagnitude() / divisor);
  }

  @Override
  default Velocity<TorqueUnit> per(TimeUnit period) {
    return div(period.of(1));
  }


  @Override
  default Mult<TorqueUnit, AccelerationUnit<?>> times(Acceleration<?> multiplier) {
    return (Mult<TorqueUnit, AccelerationUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, AccelerationUnit<?>> div(Acceleration<?> divisor) {
    return (Per<TorqueUnit, AccelerationUnit<?>>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, AngleUnit> times(Angle multiplier) {
    return (Mult<TorqueUnit, AngleUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, AngleUnit> div(Angle divisor) {
    return (Per<TorqueUnit, AngleUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, AngularAccelerationUnit> times(AngularAcceleration multiplier) {
    return (Mult<TorqueUnit, AngularAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, AngularAccelerationUnit> div(AngularAcceleration divisor) {
    return (Per<TorqueUnit, AngularAccelerationUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, AngularMomentumUnit> times(AngularMomentum multiplier) {
    return (Mult<TorqueUnit, AngularMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, AngularMomentumUnit> div(AngularMomentum divisor) {
    return (Per<TorqueUnit, AngularMomentumUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, AngularVelocityUnit> times(AngularVelocity multiplier) {
    return (Mult<TorqueUnit, AngularVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, AngularVelocityUnit> div(AngularVelocity divisor) {
    return (Per<TorqueUnit, AngularVelocityUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, CurrentUnit> times(Current multiplier) {
    return (Mult<TorqueUnit, CurrentUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, CurrentUnit> div(Current divisor) {
    return (Per<TorqueUnit, CurrentUnit>) Measure.super.div(divisor);
  }

  @Override
  default Torque div(Dimensionless divisor) {
    return (Torque) NewtonMeters.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }

  @Override
  default Torque times(Dimensionless multiplier) {
    return (Torque) NewtonMeters.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }


  @Override
  default Mult<TorqueUnit, DistanceUnit> times(Distance multiplier) {
    return (Mult<TorqueUnit, DistanceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Force div(Distance divisor) {
    return Newtons.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<TorqueUnit, EnergyUnit> times(Energy multiplier) {
    return (Mult<TorqueUnit, EnergyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, EnergyUnit> div(Energy divisor) {
    return (Per<TorqueUnit, EnergyUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, ForceUnit> times(Force multiplier) {
    return (Mult<TorqueUnit, ForceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Distance div(Force divisor) {
    return Meters.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<TorqueUnit, FrequencyUnit> times(Frequency multiplier) {
    return (Mult<TorqueUnit, FrequencyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, FrequencyUnit> div(Frequency divisor) {
    return (Per<TorqueUnit, FrequencyUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, LinearAccelerationUnit> times(LinearAcceleration multiplier) {
    return (Mult<TorqueUnit, LinearAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, LinearAccelerationUnit> div(LinearAcceleration divisor) {
    return (Per<TorqueUnit, LinearAccelerationUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, LinearMomentumUnit> times(LinearMomentum multiplier) {
    return (Mult<TorqueUnit, LinearMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, LinearMomentumUnit> div(LinearMomentum divisor) {
    return (Per<TorqueUnit, LinearMomentumUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, LinearVelocityUnit> times(LinearVelocity multiplier) {
    return (Mult<TorqueUnit, LinearVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, LinearVelocityUnit> div(LinearVelocity divisor) {
    return (Per<TorqueUnit, LinearVelocityUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, MassUnit> times(Mass multiplier) {
    return (Mult<TorqueUnit, MassUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, MassUnit> div(Mass divisor) {
    return (Per<TorqueUnit, MassUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, MomentOfInertiaUnit> times(MomentOfInertia multiplier) {
    return (Mult<TorqueUnit, MomentOfInertiaUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, MomentOfInertiaUnit> div(MomentOfInertia divisor) {
    return (Per<TorqueUnit, MomentOfInertiaUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, MultUnit<?, ?>> times(Mult<?, ?> multiplier) {
    return (Mult<TorqueUnit, MultUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, MultUnit<?, ?>> div(Mult<?, ?> divisor) {
    return (Per<TorqueUnit, MultUnit<?, ?>>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, PerUnit<?, ?>> times(Per<?, ?> multiplier) {
    return (Mult<TorqueUnit, PerUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, PerUnit<?, ?>> div(Per<?, ?> divisor) {
    return (Per<TorqueUnit, PerUnit<?, ?>>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, PowerUnit> times(Power multiplier) {
    return (Mult<TorqueUnit, PowerUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, PowerUnit> div(Power divisor) {
    return (Per<TorqueUnit, PowerUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, ResistanceUnit> times(Resistance multiplier) {
    return (Mult<TorqueUnit, ResistanceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, ResistanceUnit> div(Resistance divisor) {
    return (Per<TorqueUnit, ResistanceUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, TemperatureUnit> times(Temperature multiplier) {
    return (Mult<TorqueUnit, TemperatureUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, TemperatureUnit> div(Temperature divisor) {
    return (Per<TorqueUnit, TemperatureUnit>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, TimeUnit> times(Time multiplier) {
    return (Mult<TorqueUnit, TimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Velocity<TorqueUnit> div(Time divisor) {
    return VelocityUnit.combine(unit(), divisor.unit()).ofBaseUnits(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<TorqueUnit, TorqueUnit> times(Torque multiplier) {
    return (Mult<TorqueUnit, TorqueUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Dimensionless div(Torque divisor) {
    return Value.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<TorqueUnit, VelocityUnit<?>> times(Velocity<?> multiplier) {
    return (Mult<TorqueUnit, VelocityUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, VelocityUnit<?>> div(Velocity<?> divisor) {
    return (Per<TorqueUnit, VelocityUnit<?>>) Measure.super.div(divisor);
  }


  @Override
  default Mult<TorqueUnit, VoltageUnit> times(Voltage multiplier) {
    return (Mult<TorqueUnit, VoltageUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<TorqueUnit, VoltageUnit> div(Voltage divisor) {
    return (Per<TorqueUnit, VoltageUnit>) Measure.super.div(divisor);
  }

}
