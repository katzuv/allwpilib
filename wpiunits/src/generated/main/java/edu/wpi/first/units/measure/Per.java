// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpiunits/generate_units.py. DO NOT MODIFY

package edu.wpi.first.units.measure;

import static edu.wpi.first.units.Units.*;
import edu.wpi.first.units.*;

@SuppressWarnings({"unchecked", "cast", "checkstyle", "PMD"})
public interface Per<Dividend extends Unit, Divisor extends Unit> extends Measure<PerUnit<Dividend, Divisor>> {
  static <Dividend extends Unit, Divisor extends Unit> Per<Dividend, Divisor> ofRelativeUnits(double magnitude, PerUnit<Dividend, Divisor> unit) {
    return new ImmutablePer<Dividend, Divisor>(magnitude, unit.toBaseUnits(magnitude), unit);
  }

  static <Dividend extends Unit, Divisor extends Unit> Per<Dividend, Divisor> ofBaseUnits(double baseUnitMagnitude, PerUnit<Dividend, Divisor> unit) {
    return new ImmutablePer<Dividend, Divisor>(unit.fromBaseUnits(baseUnitMagnitude), baseUnitMagnitude, unit);
  }

  @Override
  Per<Dividend, Divisor> copy();

  @Override
  default MutPer<Dividend, Divisor> mutableCopy() {
    return new MutPer<Dividend, Divisor>(magnitude(), baseUnitMagnitude(), unit());
  }

  @Override
  PerUnit<Dividend, Divisor> unit();

  @Override
  default PerUnit<Dividend, Divisor> baseUnit() { return (PerUnit<Dividend, Divisor>) unit().getBaseUnit(); }

  @Override
  default double in(PerUnit<Dividend, Divisor> unit) {
    return unit.fromBaseUnits(baseUnitMagnitude());
  }

  @Override
  default Per<Dividend, Divisor> unaryMinus() {
    return (Per<Dividend, Divisor>) unit().ofBaseUnits(0 - baseUnitMagnitude());
  }

  @Override
  default Per<Dividend, Divisor> plus(Measure<? extends PerUnit<Dividend, Divisor>> other) {
    return (Per<Dividend, Divisor>) unit().ofBaseUnits(baseUnitMagnitude() + other.baseUnitMagnitude());
  }

  @Override
  default Per<Dividend, Divisor> minus(Measure<? extends PerUnit<Dividend, Divisor>> other) {
    return (Per<Dividend, Divisor>) unit().ofBaseUnits(baseUnitMagnitude() - other.baseUnitMagnitude());
  }

  @Override
  default Per<Dividend, Divisor> times(double multiplier) {
    return (Per<Dividend, Divisor>) unit().ofBaseUnits(baseUnitMagnitude() * multiplier);
  }

  @Override
  default Per<Dividend, Divisor> divide(double divisor) {
    return (Per<Dividend, Divisor>) unit().ofBaseUnits(baseUnitMagnitude() / divisor);
  }

  @Override
  default Velocity<PerUnit<Dividend, Divisor>> per(TimeUnit period) {
    return divide(period.of(1));
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, AccelerationUnit<?>> times(Acceleration<?> multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, AccelerationUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, AccelerationUnit<?>> divide(Acceleration<?> divisor) {
    return (Per<PerUnit<Dividend, Divisor>, AccelerationUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, AngleUnit> times(Angle multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, AngleUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, AngleUnit> divide(Angle divisor) {
    return (Per<PerUnit<Dividend, Divisor>, AngleUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, AngularAccelerationUnit> times(AngularAcceleration multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, AngularAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, AngularAccelerationUnit> divide(AngularAcceleration divisor) {
    return (Per<PerUnit<Dividend, Divisor>, AngularAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, AngularMomentumUnit> times(AngularMomentum multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, AngularMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, AngularMomentumUnit> divide(AngularMomentum divisor) {
    return (Per<PerUnit<Dividend, Divisor>, AngularMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, AngularVelocityUnit> times(AngularVelocity multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, AngularVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, AngularVelocityUnit> divide(AngularVelocity divisor) {
    return (Per<PerUnit<Dividend, Divisor>, AngularVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, CurrentUnit> times(Current multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, CurrentUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, CurrentUnit> divide(Current divisor) {
    return (Per<PerUnit<Dividend, Divisor>, CurrentUnit>) Measure.super.divide(divisor);
  }

  @Override
  default Per<Dividend, Divisor> divide(Dimensionless divisor) {
    return (Per<Dividend, Divisor>) unit().of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }

  @Override
  default Per<Dividend, Divisor> times(Dimensionless multiplier) {
    return (Per<Dividend, Divisor>) unit().of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, DistanceUnit> times(Distance multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, DistanceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, DistanceUnit> divide(Distance divisor) {
    return (Per<PerUnit<Dividend, Divisor>, DistanceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, EnergyUnit> times(Energy multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, EnergyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, EnergyUnit> divide(Energy divisor) {
    return (Per<PerUnit<Dividend, Divisor>, EnergyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, ForceUnit> times(Force multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, ForceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, ForceUnit> divide(Force divisor) {
    return (Per<PerUnit<Dividend, Divisor>, ForceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, FrequencyUnit> times(Frequency multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, FrequencyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, FrequencyUnit> divide(Frequency divisor) {
    return (Per<PerUnit<Dividend, Divisor>, FrequencyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, LinearAccelerationUnit> times(LinearAcceleration multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, LinearAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, LinearAccelerationUnit> divide(LinearAcceleration divisor) {
    return (Per<PerUnit<Dividend, Divisor>, LinearAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, LinearMomentumUnit> times(LinearMomentum multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, LinearMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, LinearMomentumUnit> divide(LinearMomentum divisor) {
    return (Per<PerUnit<Dividend, Divisor>, LinearMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, LinearVelocityUnit> times(LinearVelocity multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, LinearVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, LinearVelocityUnit> divide(LinearVelocity divisor) {
    return (Per<PerUnit<Dividend, Divisor>, LinearVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, MassUnit> times(Mass multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, MassUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, MassUnit> divide(Mass divisor) {
    return (Per<PerUnit<Dividend, Divisor>, MassUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, MomentOfInertiaUnit> times(MomentOfInertia multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, MomentOfInertiaUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, MomentOfInertiaUnit> divide(MomentOfInertia divisor) {
    return (Per<PerUnit<Dividend, Divisor>, MomentOfInertiaUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, MultUnit<?, ?>> times(Mult<?, ?> multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, MultUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, MultUnit<?, ?>> divide(Mult<?, ?> divisor) {
    return (Per<PerUnit<Dividend, Divisor>, MultUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, PerUnit<?, ?>> times(Per<?, ?> multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, PerUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, PerUnit<?, ?>> divide(Per<?, ?> divisor) {
    return (Per<PerUnit<Dividend, Divisor>, PerUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, PowerUnit> times(Power multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, PowerUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, PowerUnit> divide(Power divisor) {
    return (Per<PerUnit<Dividend, Divisor>, PowerUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, ResistanceUnit> times(Resistance multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, ResistanceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, ResistanceUnit> divide(Resistance divisor) {
    return (Per<PerUnit<Dividend, Divisor>, ResistanceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, TemperatureUnit> times(Temperature multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, TemperatureUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, TemperatureUnit> divide(Temperature divisor) {
    return (Per<PerUnit<Dividend, Divisor>, TemperatureUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, TimeUnit> times(Time multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, TimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Velocity<PerUnit<Dividend, Divisor>> divide(Time divisor) {
    return VelocityUnit.combine(unit(), divisor.unit()).ofBaseUnits(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, TorqueUnit> times(Torque multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, TorqueUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, TorqueUnit> divide(Torque divisor) {
    return (Per<PerUnit<Dividend, Divisor>, TorqueUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, VelocityUnit<?>> times(Velocity<?> multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, VelocityUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, VelocityUnit<?>> divide(Velocity<?> divisor) {
    return (Per<PerUnit<Dividend, Divisor>, VelocityUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<PerUnit<Dividend, Divisor>, VoltageUnit> times(Voltage multiplier) {
    return (Mult<PerUnit<Dividend, Divisor>, VoltageUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<PerUnit<Dividend, Divisor>, VoltageUnit> divide(Voltage divisor) {
    return (Per<PerUnit<Dividend, Divisor>, VoltageUnit>) Measure.super.divide(divisor);
  }
default Measure<Dividend> timesDivisor(Measure<? extends Divisor> multiplier) {
  return (Measure<Dividend>) baseUnit().numerator().ofBaseUnits(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
}

default Measure<? extends PerUnit<Divisor, Dividend>> reciprocal() {
  // May return a velocity if Divisor == TimeUnit, so we can't guarantee a "Per" instance
  return baseUnit().reciprocal().ofBaseUnits(1 / baseUnitMagnitude());
}
}
